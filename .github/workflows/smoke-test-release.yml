name: Smoke test release
on:
    release:
        types: [released, prereleased, published]
    workflow_dispatch:
        inputs:
            tag:
                description: 'WooCommerce Release Tag'
                required: true
concurrency:
    group: ${{ github.workflow }}-${{ github.event.release.tag_name || inputs.tag }}
    cancel-in-progress: true
permissions: {}
env:
    E2E_WP_LATEST_ARTIFACT: E2E test on release smoke test site with WP Latest (run ${{ github.run_number }})
    E2E_UPDATE_WC_ARTIFACT: WooCommerce version update test on release smoke test site (run ${{ github.run_number }})
    SLACK_BLOCKS_ARTIFACT: slack-blocks
jobs:
    get-tag:
        name: Get WooCommerce release tag
        permissions:
            contents: read
        runs-on: ubuntu-20.04
        outputs:
            tag: ${{ steps.get-tag.outputs.tag }}
            created: ${{ steps.created-at.outputs.created }}
        steps:
            - name: Validate tag
              if: ${{ github.event_name == 'workflow_dispatch' }}
              env:
                  GH_TOKEN: ${{ secrets.E2E_GH_TOKEN }}
              run: gh release view "${{ inputs.tag }}" --repo=woocommerce/woocommerce

            - name: Get tag from triggered event
              id: get-tag
              env:
                  RELEASE_TAG: ${{ github.event.release.tag_name || inputs.tag }}
              run: |
                  echo "Triggered event: ${{ github.event_name }}"
                  echo "Tag from event: $RELEASE_TAG"
                  echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

            - name: Verify woocommerce.zip asset
              env:
                  GH_TOKEN: ${{ secrets.E2E_GH_TOKEN }}
                  RELEASE_TAG: ${{ steps.get-tag.outputs.tag }}
              run: |
                  ASSET_NAMES=$(gh release view $RELEASE_TAG --repo woocommerce/woocommerce --json assets --jq ".assets[].name")
                  if [[ $ASSET_NAMES == *"woocommerce.zip"* ]]
                    then
                      echo "$RELEASE_TAG has a valid woocommerce.zip asset."
                      exit 0
                  fi

                  echo "$RELEASE_TAG does not have a valid woocommerce.zip asset."
                  exit 1

            - name: Get 'created-at' of WooCommerce zip
              id: created-at
              env:
                  GH_TOKEN: ${{ secrets.E2E_GH_TOKEN }}
              run: echo "created=$(gh release view ${{ steps.get-tag.outputs.tag }} --json assets --jq .assets[0].createdAt --repo woocommerce/woocommerce)" >> $GITHUB_OUTPUT

    test-php-versions:
        name: Test against PHP ${{ matrix.php_version }}
        runs-on: ubuntu-20.04
        needs: [get-tag]
        strategy:
            fail-fast: false
            matrix:
                php_version: ['7.4', '8.1']
        env:
            API_ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/test-results/allure-report
            API_ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/test-results/allure-results
            API_ARTIFACT: API test on wp-env with PHP ${{ matrix.php_version }} (run ${{ github.run_number }})
            E2E_ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-report
            E2E_ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-results
            E2E_ARTIFACT: E2E test on wp-env with PHP ${{ matrix.php_version }} (run ${{ github.run_number }})
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  build-filters: woocommerce
                  php-version: ${{ matrix.php_version }}

            - name: Launch WP Env
              working-directory: plugins/woocommerce
              env:
                  WP_ENV_PHP_VERSION: ${{ matrix.php_version }}
              run: pnpm run env:test

            - name: Verify PHP version
              working-directory: .github/workflows/scripts
              env:
                  EXPECTED_PHP_VERSION: ${{ matrix.php_version }}
              run: bash verify-php-version.sh

            - name: Download release zip
              env:
                  GH_TOKEN: ${{ secrets.E2E_GH_TOKEN }}
              run: gh release download ${{ needs.get-tag.outputs.tag }} --dir tmp

            - name: Replace `plugins/woocommerce` with unzipped woocommerce release build
              run: unzip -d plugins -o tmp/woocommerce.zip

            - name: Run API tests
              id: run-api-composite-action
              uses: ./.github/actions/tests/run-api-tests
              with:
                  report-name: ${{ env.API_ARTIFACT }}
                  tests: hello.test.js
              env:
                  ALLURE_RESULTS_DIR: ${{ env.API_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.API_ALLURE_REPORT_DIR }}

            - name: Upload Allure artifacts to bucket
              if: success() || ( failure() && steps.run-api-composite-action.conclusion == 'failure' )
              uses: ./.github/actions/tests/upload-allure-files-to-bucket
              env:
                  ALLURE_RESULTS_DIR: ${{ env.API_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.API_ALLURE_REPORT_DIR }}
              with:
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}
                  artifact-name: ${{ env.API_ARTIFACT }}
                  s3-bucket: ${{ secrets.REPORTS_BUCKET }}

            - name: Publish API Allure report
              if: success() || ( failure() && steps.run-api-composite-action.conclusion == 'failure' )
              env:
                  GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
                  ENV_DESCRIPTION: php-${{ matrix.php_version }}
              run: |
                  gh workflow run publish-test-reports-release.yml \
                    -f created_at="${{ needs.get-tag.outputs.created }}" \
                    -f run_id=${{ github.run_id }} \
                    -f run_number=${{ github.run_number }} \
                    -f release_tag=${{ needs.get-tag.outputs.tag }} \
                    -f artifact="${{ env.API_ARTIFACT }}" \
                    -f env_description="${{ env.ENV_DESCRIPTION }}" \
                    -f test_type="api" \
                    --repo woocommerce/woocommerce-test-reports

            - name: Run E2E tests
              id: run-e2e-composite-action
              timeout-minutes: 60
              uses: ./.github/actions/tests/run-e2e-tests
              env:
                  ALLURE_RESULTS_DIR: ${{ env.E2E_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.E2E_ALLURE_REPORT_DIR }}
                  DEFAULT_TIMEOUT_OVERRIDE: 120000
                  E2E_MAX_FAILURES: 15
              with:
                  report-name: ${{ env.E2E_ARTIFACT }}

            - name: Upload Allure artifacts to bucket
              if: success() || ( failure() && steps.run-e2e-composite-action.conclusion == 'failure' )
              uses: ./.github/actions/tests/upload-allure-files-to-bucket
              env:
                  ALLURE_RESULTS_DIR: ${{ env.E2E_ALLURE_RESULTS_DIR }}
                  ALLURE_REPORT_DIR: ${{ env.E2E_ALLURE_REPORT_DIR }}
              with:
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}
                  artifact-name: ${{ env.E2E_ARTIFACT }}
                  s3-bucket: ${{ secrets.REPORTS_BUCKET }}

            - name: Publish E2E Allure report
              if: success() || ( failure() && steps.run-e2e-composite-action.conclusion == 'failure' )
              env:
                  GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
                  ENV_DESCRIPTION: php-${{ matrix.php_version }}
              run: |
                  gh workflow run publish-test-reports-release.yml \
                    -f created_at="${{ needs.get-tag.outputs.created }}" \
                    -f run_id=${{ github.run_id }} \
                    -f run_number=${{ github.run_number }} \
                    -f release_tag=${{ needs.get-tag.outputs.tag }} \
                    -f artifact="${{ env.E2E_ARTIFACT }}" \
                    -f env_description="${{ env.ENV_DESCRIPTION }}" \
                    -f test_type="e2e" \
                    --repo woocommerce/woocommerce-test-reports

            - name: Create Slack block
              if: |
                  success() || (
                    failure() && (
                      steps.run-api-composite-action.outputs.result == 'failure' ||
                      steps.run-e2e-composite-action.outputs.result == 'failure' 
                    )
                  )
              uses: ./.github/actions/tests/slack-summary-on-release/slack-blocks
              with:
                  test-name: PHP ${{ matrix.php_version }}
                  api-result: ${{ steps.run-api-composite-action.outputs.result }}
                  e2e-result: ${{ steps.run-e2e-composite-action.outputs.result }}
                  env-slug: php-${{ matrix.php_version }}
                  release-version: ${{ needs.get-tag.outputs.tag }}
